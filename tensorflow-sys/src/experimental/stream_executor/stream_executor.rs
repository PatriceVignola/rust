/* automatically generated by rust-bindgen 0.59.2 */

pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SP_Stream_st {
    _unused: [u8; 0],
}
pub type SP_Stream = *mut SP_Stream_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SP_Event_st {
    _unused: [u8; 0],
}
pub type SP_Event = *mut SP_Event_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SP_Timer_st {
    _unused: [u8; 0],
}
pub type SP_Timer = *mut SP_Timer_st;
pub type SE_StatusCallbackFn = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: *mut TF_Status),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SP_TimerFns {
    pub struct_size: usize,
    pub ext: *mut ::std::os::raw::c_void,
    pub nanoseconds: ::std::option::Option<unsafe extern "C" fn(timer: SP_Timer) -> u64>,
}
#[test]
fn bindgen_test_layout_SP_TimerFns() {
    assert_eq!(
        ::std::mem::size_of::<SP_TimerFns>(),
        24usize,
        concat!("Size of: ", stringify!(SP_TimerFns))
    );
    assert_eq!(
        ::std::mem::align_of::<SP_TimerFns>(),
        8usize,
        concat!("Alignment of ", stringify!(SP_TimerFns))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SP_TimerFns>())).struct_size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_TimerFns),
            "::",
            stringify!(struct_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SP_TimerFns>())).ext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_TimerFns),
            "::",
            stringify!(ext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SP_TimerFns>())).nanoseconds as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_TimerFns),
            "::",
            stringify!(nanoseconds)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SP_AllocatorStats {
    pub struct_size: usize,
    pub num_allocs: i64,
    pub bytes_in_use: i64,
    pub peak_bytes_in_use: i64,
    pub largest_alloc_size: i64,
    pub has_bytes_limit: i8,
    pub bytes_limit: i64,
    pub bytes_reserved: i64,
    pub peak_bytes_reserved: i64,
    pub has_bytes_reservable_limit: i8,
    pub bytes_reservable_limit: i64,
    pub largest_free_block_bytes: i64,
}
#[test]
fn bindgen_test_layout_SP_AllocatorStats() {
    assert_eq!(
        ::std::mem::size_of::<SP_AllocatorStats>(),
        96usize,
        concat!("Size of: ", stringify!(SP_AllocatorStats))
    );
    assert_eq!(
        ::std::mem::align_of::<SP_AllocatorStats>(),
        8usize,
        concat!("Alignment of ", stringify!(SP_AllocatorStats))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SP_AllocatorStats>())).struct_size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_AllocatorStats),
            "::",
            stringify!(struct_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SP_AllocatorStats>())).num_allocs as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_AllocatorStats),
            "::",
            stringify!(num_allocs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SP_AllocatorStats>())).bytes_in_use as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_AllocatorStats),
            "::",
            stringify!(bytes_in_use)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SP_AllocatorStats>())).peak_bytes_in_use as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_AllocatorStats),
            "::",
            stringify!(peak_bytes_in_use)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SP_AllocatorStats>())).largest_alloc_size as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_AllocatorStats),
            "::",
            stringify!(largest_alloc_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SP_AllocatorStats>())).has_bytes_limit as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_AllocatorStats),
            "::",
            stringify!(has_bytes_limit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SP_AllocatorStats>())).bytes_limit as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_AllocatorStats),
            "::",
            stringify!(bytes_limit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SP_AllocatorStats>())).bytes_reserved as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_AllocatorStats),
            "::",
            stringify!(bytes_reserved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SP_AllocatorStats>())).peak_bytes_reserved as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_AllocatorStats),
            "::",
            stringify!(peak_bytes_reserved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SP_AllocatorStats>())).has_bytes_reservable_limit as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_AllocatorStats),
            "::",
            stringify!(has_bytes_reservable_limit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SP_AllocatorStats>())).bytes_reservable_limit as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_AllocatorStats),
            "::",
            stringify!(bytes_reservable_limit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SP_AllocatorStats>())).largest_free_block_bytes as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_AllocatorStats),
            "::",
            stringify!(largest_free_block_bytes)
        )
    );
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum SE_EventStatus {
    SE_EVENT_UNKNOWN = 0,
    SE_EVENT_ERROR = 1,
    SE_EVENT_PENDING = 2,
    SE_EVENT_COMPLETE = 3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SP_DeviceMemoryBase {
    pub struct_size: usize,
    pub ext: *mut ::std::os::raw::c_void,
    pub opaque: *mut ::std::os::raw::c_void,
    pub size: u64,
    pub payload: u64,
}
#[test]
fn bindgen_test_layout_SP_DeviceMemoryBase() {
    assert_eq!(
        ::std::mem::size_of::<SP_DeviceMemoryBase>(),
        40usize,
        concat!("Size of: ", stringify!(SP_DeviceMemoryBase))
    );
    assert_eq!(
        ::std::mem::align_of::<SP_DeviceMemoryBase>(),
        8usize,
        concat!("Alignment of ", stringify!(SP_DeviceMemoryBase))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SP_DeviceMemoryBase>())).struct_size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_DeviceMemoryBase),
            "::",
            stringify!(struct_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SP_DeviceMemoryBase>())).ext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_DeviceMemoryBase),
            "::",
            stringify!(ext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SP_DeviceMemoryBase>())).opaque as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_DeviceMemoryBase),
            "::",
            stringify!(opaque)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SP_DeviceMemoryBase>())).size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_DeviceMemoryBase),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SP_DeviceMemoryBase>())).payload as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_DeviceMemoryBase),
            "::",
            stringify!(payload)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SP_Device {
    pub struct_size: usize,
    pub ext: *mut ::std::os::raw::c_void,
    pub ordinal: i32,
    pub device_handle: *mut ::std::os::raw::c_void,
    pub hardware_name: *const ::std::os::raw::c_char,
    pub device_vendor: *const ::std::os::raw::c_char,
    pub pci_bus_id: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_SP_Device() {
    assert_eq!(
        ::std::mem::size_of::<SP_Device>(),
        56usize,
        concat!("Size of: ", stringify!(SP_Device))
    );
    assert_eq!(
        ::std::mem::align_of::<SP_Device>(),
        8usize,
        concat!("Alignment of ", stringify!(SP_Device))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SP_Device>())).struct_size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_Device),
            "::",
            stringify!(struct_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SP_Device>())).ext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_Device),
            "::",
            stringify!(ext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SP_Device>())).ordinal as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_Device),
            "::",
            stringify!(ordinal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SP_Device>())).device_handle as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_Device),
            "::",
            stringify!(device_handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SP_Device>())).hardware_name as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_Device),
            "::",
            stringify!(hardware_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SP_Device>())).device_vendor as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_Device),
            "::",
            stringify!(device_vendor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SP_Device>())).pci_bus_id as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_Device),
            "::",
            stringify!(pci_bus_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SE_CreateDeviceParams {
    pub struct_size: usize,
    pub ext: *mut ::std::os::raw::c_void,
    pub ordinal: i32,
    pub device: *mut SP_Device,
}
#[test]
fn bindgen_test_layout_SE_CreateDeviceParams() {
    assert_eq!(
        ::std::mem::size_of::<SE_CreateDeviceParams>(),
        32usize,
        concat!("Size of: ", stringify!(SE_CreateDeviceParams))
    );
    assert_eq!(
        ::std::mem::align_of::<SE_CreateDeviceParams>(),
        8usize,
        concat!("Alignment of ", stringify!(SE_CreateDeviceParams))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SE_CreateDeviceParams>())).struct_size as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SE_CreateDeviceParams),
            "::",
            stringify!(struct_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SE_CreateDeviceParams>())).ext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SE_CreateDeviceParams),
            "::",
            stringify!(ext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SE_CreateDeviceParams>())).ordinal as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SE_CreateDeviceParams),
            "::",
            stringify!(ordinal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SE_CreateDeviceParams>())).device as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SE_CreateDeviceParams),
            "::",
            stringify!(device)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SP_DeviceFns {
    pub struct_size: usize,
    pub ext: *mut ::std::os::raw::c_void,
    pub get_numa_node: ::std::option::Option<unsafe extern "C" fn(device: *const SP_Device) -> i32>,
    pub get_memory_bandwidth:
        ::std::option::Option<unsafe extern "C" fn(device: *const SP_Device) -> i64>,
    pub get_gflops: ::std::option::Option<unsafe extern "C" fn(device: *const SP_Device) -> f64>,
}
#[test]
fn bindgen_test_layout_SP_DeviceFns() {
    assert_eq!(
        ::std::mem::size_of::<SP_DeviceFns>(),
        40usize,
        concat!("Size of: ", stringify!(SP_DeviceFns))
    );
    assert_eq!(
        ::std::mem::align_of::<SP_DeviceFns>(),
        8usize,
        concat!("Alignment of ", stringify!(SP_DeviceFns))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SP_DeviceFns>())).struct_size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_DeviceFns),
            "::",
            stringify!(struct_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SP_DeviceFns>())).ext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_DeviceFns),
            "::",
            stringify!(ext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SP_DeviceFns>())).get_numa_node as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_DeviceFns),
            "::",
            stringify!(get_numa_node)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SP_DeviceFns>())).get_memory_bandwidth as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_DeviceFns),
            "::",
            stringify!(get_memory_bandwidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SP_DeviceFns>())).get_gflops as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_DeviceFns),
            "::",
            stringify!(get_gflops)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SE_CreateDeviceFnsParams {
    pub struct_size: usize,
    pub ext: *mut ::std::os::raw::c_void,
    pub device_fns: *mut SP_DeviceFns,
}
#[test]
fn bindgen_test_layout_SE_CreateDeviceFnsParams() {
    assert_eq!(
        ::std::mem::size_of::<SE_CreateDeviceFnsParams>(),
        24usize,
        concat!("Size of: ", stringify!(SE_CreateDeviceFnsParams))
    );
    assert_eq!(
        ::std::mem::align_of::<SE_CreateDeviceFnsParams>(),
        8usize,
        concat!("Alignment of ", stringify!(SE_CreateDeviceFnsParams))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SE_CreateDeviceFnsParams>())).struct_size as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SE_CreateDeviceFnsParams),
            "::",
            stringify!(struct_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SE_CreateDeviceFnsParams>())).ext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SE_CreateDeviceFnsParams),
            "::",
            stringify!(ext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SE_CreateDeviceFnsParams>())).device_fns as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SE_CreateDeviceFnsParams),
            "::",
            stringify!(device_fns)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SP_StreamExecutor {
    pub struct_size: usize,
    pub ext: *mut ::std::os::raw::c_void,
    #[doc = " ALLOCATION CALLBACKS"]
    pub allocate: ::std::option::Option<
        unsafe extern "C" fn(
            device: *const SP_Device,
            size: u64,
            memory_space: i64,
            mem: *mut SP_DeviceMemoryBase,
        ),
    >,
    pub deallocate: ::std::option::Option<
        unsafe extern "C" fn(device: *const SP_Device, memory: *mut SP_DeviceMemoryBase),
    >,
    pub host_memory_allocate: ::std::option::Option<
        unsafe extern "C" fn(device: *const SP_Device, size: u64) -> *mut ::std::os::raw::c_void,
    >,
    pub host_memory_deallocate: ::std::option::Option<
        unsafe extern "C" fn(device: *const SP_Device, mem: *mut ::std::os::raw::c_void),
    >,
    pub unified_memory_allocate: ::std::option::Option<
        unsafe extern "C" fn(device: *const SP_Device, bytes: u64) -> *mut ::std::os::raw::c_void,
    >,
    pub unified_memory_deallocate: ::std::option::Option<
        unsafe extern "C" fn(device: *const SP_Device, location: *mut ::std::os::raw::c_void),
    >,
    pub get_allocator_stats: ::std::option::Option<
        unsafe extern "C" fn(
            device: *const SP_Device,
            stats: *mut SP_AllocatorStats,
        ) -> ::std::os::raw::c_uchar,
    >,
    pub device_memory_usage: ::std::option::Option<
        unsafe extern "C" fn(
            device: *const SP_Device,
            free: *mut i64,
            total: *mut i64,
        ) -> ::std::os::raw::c_uchar,
    >,
    #[doc = " STREAM CALLBACKS"]
    pub create_stream: ::std::option::Option<
        unsafe extern "C" fn(
            device: *const SP_Device,
            stream: *mut SP_Stream,
            status: *mut TF_Status,
        ),
    >,
    pub destroy_stream:
        ::std::option::Option<unsafe extern "C" fn(device: *const SP_Device, stream: SP_Stream)>,
    pub create_stream_dependency: ::std::option::Option<
        unsafe extern "C" fn(
            device: *const SP_Device,
            dependent: SP_Stream,
            other: SP_Stream,
            status: *mut TF_Status,
        ),
    >,
    pub get_stream_status: ::std::option::Option<
        unsafe extern "C" fn(device: *const SP_Device, stream: SP_Stream, status: *mut TF_Status),
    >,
    #[doc = " EVENT CALLBACKS"]
    pub create_event: ::std::option::Option<
        unsafe extern "C" fn(
            device: *const SP_Device,
            event: *mut SP_Event,
            status: *mut TF_Status,
        ),
    >,
    pub destroy_event:
        ::std::option::Option<unsafe extern "C" fn(device: *const SP_Device, event: SP_Event)>,
    pub get_event_status: ::std::option::Option<
        unsafe extern "C" fn(device: *const SP_Device, event: SP_Event) -> SE_EventStatus,
    >,
    pub record_event: ::std::option::Option<
        unsafe extern "C" fn(
            device: *const SP_Device,
            stream: SP_Stream,
            event: SP_Event,
            status: *mut TF_Status,
        ),
    >,
    pub wait_for_event: ::std::option::Option<
        unsafe extern "C" fn(
            device: *const SP_Device,
            stream: SP_Stream,
            event: SP_Event,
            status: *mut TF_Status,
        ),
    >,
    #[doc = " TIMER CALLBACKS"]
    pub create_timer: ::std::option::Option<
        unsafe extern "C" fn(
            device: *const SP_Device,
            timer: *mut SP_Timer,
            status: *mut TF_Status,
        ),
    >,
    pub destroy_timer:
        ::std::option::Option<unsafe extern "C" fn(device: *const SP_Device, timer: SP_Timer)>,
    pub start_timer: ::std::option::Option<
        unsafe extern "C" fn(
            device: *const SP_Device,
            stream: SP_Stream,
            timer: SP_Timer,
            status: *mut TF_Status,
        ),
    >,
    pub stop_timer: ::std::option::Option<
        unsafe extern "C" fn(
            device: *const SP_Device,
            stream: SP_Stream,
            timer: SP_Timer,
            status: *mut TF_Status,
        ),
    >,
    #[doc = " MEMCPY CALLBACKS"]
    pub memcpy_dtoh: ::std::option::Option<
        unsafe extern "C" fn(
            device: *const SP_Device,
            stream: SP_Stream,
            host_dst: *mut ::std::os::raw::c_void,
            device_src: *const SP_DeviceMemoryBase,
            size: u64,
            status: *mut TF_Status,
        ),
    >,
    pub memcpy_htod: ::std::option::Option<
        unsafe extern "C" fn(
            device: *const SP_Device,
            stream: SP_Stream,
            device_dst: *mut SP_DeviceMemoryBase,
            host_src: *const ::std::os::raw::c_void,
            size: u64,
            status: *mut TF_Status,
        ),
    >,
    pub memcpy_dtod: ::std::option::Option<
        unsafe extern "C" fn(
            device: *const SP_Device,
            stream: SP_Stream,
            device_dst: *mut SP_DeviceMemoryBase,
            device_src: *const SP_DeviceMemoryBase,
            size: u64,
            status: *mut TF_Status,
        ),
    >,
    pub sync_memcpy_dtoh: ::std::option::Option<
        unsafe extern "C" fn(
            device: *const SP_Device,
            host_dst: *mut ::std::os::raw::c_void,
            device_src: *const SP_DeviceMemoryBase,
            size: u64,
            status: *mut TF_Status,
        ),
    >,
    pub sync_memcpy_htod: ::std::option::Option<
        unsafe extern "C" fn(
            device: *const SP_Device,
            device_dst: *mut SP_DeviceMemoryBase,
            host_src: *const ::std::os::raw::c_void,
            size: u64,
            status: *mut TF_Status,
        ),
    >,
    pub sync_memcpy_dtod: ::std::option::Option<
        unsafe extern "C" fn(
            device: *const SP_Device,
            device_dst: *mut SP_DeviceMemoryBase,
            device_src: *const SP_DeviceMemoryBase,
            size: u64,
            status: *mut TF_Status,
        ),
    >,
    pub block_host_for_event: ::std::option::Option<
        unsafe extern "C" fn(device: *const SP_Device, event: SP_Event, status: *mut TF_Status),
    >,
    pub block_host_until_done: ::std::option::Option<
        unsafe extern "C" fn(device: *const SP_Device, stream: SP_Stream, status: *mut TF_Status),
    >,
    pub synchronize_all_activity: ::std::option::Option<
        unsafe extern "C" fn(device: *const SP_Device, status: *mut TF_Status),
    >,
    pub mem_zero: ::std::option::Option<
        unsafe extern "C" fn(
            device: *const SP_Device,
            stream: SP_Stream,
            location: *mut SP_DeviceMemoryBase,
            size: u64,
            status: *mut TF_Status,
        ),
    >,
    pub memset: ::std::option::Option<
        unsafe extern "C" fn(
            device: *const SP_Device,
            stream: SP_Stream,
            location: *mut SP_DeviceMemoryBase,
            pattern: u8,
            size: u64,
            status: *mut TF_Status,
        ),
    >,
    pub memset32: ::std::option::Option<
        unsafe extern "C" fn(
            device: *const SP_Device,
            stream: SP_Stream,
            location: *mut SP_DeviceMemoryBase,
            pattern: u32,
            size: u64,
            status: *mut TF_Status,
        ),
    >,
    pub host_callback: ::std::option::Option<
        unsafe extern "C" fn(
            device: *const SP_Device,
            stream: SP_Stream,
            callback_fn: SE_StatusCallbackFn,
            callback_arg: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_uchar,
    >,
}
#[test]
fn bindgen_test_layout_SP_StreamExecutor() {
    assert_eq!(
        ::std::mem::size_of::<SP_StreamExecutor>(),
        288usize,
        concat!("Size of: ", stringify!(SP_StreamExecutor))
    );
    assert_eq!(
        ::std::mem::align_of::<SP_StreamExecutor>(),
        8usize,
        concat!("Alignment of ", stringify!(SP_StreamExecutor))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SP_StreamExecutor>())).struct_size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_StreamExecutor),
            "::",
            stringify!(struct_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SP_StreamExecutor>())).ext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_StreamExecutor),
            "::",
            stringify!(ext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SP_StreamExecutor>())).allocate as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_StreamExecutor),
            "::",
            stringify!(allocate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SP_StreamExecutor>())).deallocate as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_StreamExecutor),
            "::",
            stringify!(deallocate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SP_StreamExecutor>())).host_memory_allocate as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_StreamExecutor),
            "::",
            stringify!(host_memory_allocate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SP_StreamExecutor>())).host_memory_deallocate as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_StreamExecutor),
            "::",
            stringify!(host_memory_deallocate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SP_StreamExecutor>())).unified_memory_allocate as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_StreamExecutor),
            "::",
            stringify!(unified_memory_allocate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SP_StreamExecutor>())).unified_memory_deallocate as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_StreamExecutor),
            "::",
            stringify!(unified_memory_deallocate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SP_StreamExecutor>())).get_allocator_stats as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_StreamExecutor),
            "::",
            stringify!(get_allocator_stats)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SP_StreamExecutor>())).device_memory_usage as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_StreamExecutor),
            "::",
            stringify!(device_memory_usage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SP_StreamExecutor>())).create_stream as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_StreamExecutor),
            "::",
            stringify!(create_stream)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SP_StreamExecutor>())).destroy_stream as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_StreamExecutor),
            "::",
            stringify!(destroy_stream)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SP_StreamExecutor>())).create_stream_dependency as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_StreamExecutor),
            "::",
            stringify!(create_stream_dependency)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SP_StreamExecutor>())).get_stream_status as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_StreamExecutor),
            "::",
            stringify!(get_stream_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SP_StreamExecutor>())).create_event as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_StreamExecutor),
            "::",
            stringify!(create_event)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SP_StreamExecutor>())).destroy_event as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_StreamExecutor),
            "::",
            stringify!(destroy_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SP_StreamExecutor>())).get_event_status as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_StreamExecutor),
            "::",
            stringify!(get_event_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SP_StreamExecutor>())).record_event as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_StreamExecutor),
            "::",
            stringify!(record_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SP_StreamExecutor>())).wait_for_event as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_StreamExecutor),
            "::",
            stringify!(wait_for_event)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SP_StreamExecutor>())).create_timer as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_StreamExecutor),
            "::",
            stringify!(create_timer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SP_StreamExecutor>())).destroy_timer as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_StreamExecutor),
            "::",
            stringify!(destroy_timer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SP_StreamExecutor>())).start_timer as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_StreamExecutor),
            "::",
            stringify!(start_timer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SP_StreamExecutor>())).stop_timer as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_StreamExecutor),
            "::",
            stringify!(stop_timer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SP_StreamExecutor>())).memcpy_dtoh as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_StreamExecutor),
            "::",
            stringify!(memcpy_dtoh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SP_StreamExecutor>())).memcpy_htod as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_StreamExecutor),
            "::",
            stringify!(memcpy_htod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SP_StreamExecutor>())).memcpy_dtod as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_StreamExecutor),
            "::",
            stringify!(memcpy_dtod)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SP_StreamExecutor>())).sync_memcpy_dtoh as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_StreamExecutor),
            "::",
            stringify!(sync_memcpy_dtoh)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SP_StreamExecutor>())).sync_memcpy_htod as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_StreamExecutor),
            "::",
            stringify!(sync_memcpy_htod)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SP_StreamExecutor>())).sync_memcpy_dtod as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_StreamExecutor),
            "::",
            stringify!(sync_memcpy_dtod)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SP_StreamExecutor>())).block_host_for_event as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_StreamExecutor),
            "::",
            stringify!(block_host_for_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SP_StreamExecutor>())).block_host_until_done as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_StreamExecutor),
            "::",
            stringify!(block_host_until_done)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SP_StreamExecutor>())).synchronize_all_activity as *const _
                as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_StreamExecutor),
            "::",
            stringify!(synchronize_all_activity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SP_StreamExecutor>())).mem_zero as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_StreamExecutor),
            "::",
            stringify!(mem_zero)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SP_StreamExecutor>())).memset as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_StreamExecutor),
            "::",
            stringify!(memset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SP_StreamExecutor>())).memset32 as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_StreamExecutor),
            "::",
            stringify!(memset32)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SP_StreamExecutor>())).host_callback as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_StreamExecutor),
            "::",
            stringify!(host_callback)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SE_CreateStreamExecutorParams {
    pub struct_size: usize,
    pub ext: *mut ::std::os::raw::c_void,
    pub stream_executor: *mut SP_StreamExecutor,
}
#[test]
fn bindgen_test_layout_SE_CreateStreamExecutorParams() {
    assert_eq!(
        ::std::mem::size_of::<SE_CreateStreamExecutorParams>(),
        24usize,
        concat!("Size of: ", stringify!(SE_CreateStreamExecutorParams))
    );
    assert_eq!(
        ::std::mem::align_of::<SE_CreateStreamExecutorParams>(),
        8usize,
        concat!("Alignment of ", stringify!(SE_CreateStreamExecutorParams))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SE_CreateStreamExecutorParams>())).struct_size as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SE_CreateStreamExecutorParams),
            "::",
            stringify!(struct_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SE_CreateStreamExecutorParams>())).ext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SE_CreateStreamExecutorParams),
            "::",
            stringify!(ext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SE_CreateStreamExecutorParams>())).stream_executor as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SE_CreateStreamExecutorParams),
            "::",
            stringify!(stream_executor)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SP_Platform {
    pub struct_size: usize,
    pub ext: *mut ::std::os::raw::c_void,
    pub name: *const ::std::os::raw::c_char,
    pub type_: *const ::std::os::raw::c_char,
    pub supports_unified_memory: ::std::os::raw::c_uchar,
    pub use_bfc_allocator: ::std::os::raw::c_uchar,
    pub force_memory_growth: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_SP_Platform() {
    assert_eq!(
        ::std::mem::size_of::<SP_Platform>(),
        40usize,
        concat!("Size of: ", stringify!(SP_Platform))
    );
    assert_eq!(
        ::std::mem::align_of::<SP_Platform>(),
        8usize,
        concat!("Alignment of ", stringify!(SP_Platform))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SP_Platform>())).struct_size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_Platform),
            "::",
            stringify!(struct_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SP_Platform>())).ext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_Platform),
            "::",
            stringify!(ext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SP_Platform>())).name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_Platform),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SP_Platform>())).type_ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_Platform),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SP_Platform>())).supports_unified_memory as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_Platform),
            "::",
            stringify!(supports_unified_memory)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SP_Platform>())).use_bfc_allocator as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_Platform),
            "::",
            stringify!(use_bfc_allocator)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SP_Platform>())).force_memory_growth as *const _ as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_Platform),
            "::",
            stringify!(force_memory_growth)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SP_PlatformFns {
    pub struct_size: usize,
    pub ext: *mut ::std::os::raw::c_void,
    pub get_device_count: ::std::option::Option<
        unsafe extern "C" fn(
            platform: *const SP_Platform,
            device_count: *mut ::std::os::raw::c_int,
            status: *mut TF_Status,
        ),
    >,
    pub create_device: ::std::option::Option<
        unsafe extern "C" fn(
            platform: *const SP_Platform,
            params: *mut SE_CreateDeviceParams,
            status: *mut TF_Status,
        ),
    >,
    pub destroy_device: ::std::option::Option<
        unsafe extern "C" fn(platform: *const SP_Platform, device: *mut SP_Device),
    >,
    pub create_device_fns: ::std::option::Option<
        unsafe extern "C" fn(
            platform: *const SP_Platform,
            params: *mut SE_CreateDeviceFnsParams,
            status: *mut TF_Status,
        ),
    >,
    pub destroy_device_fns: ::std::option::Option<
        unsafe extern "C" fn(platform: *const SP_Platform, device_fns: *mut SP_DeviceFns),
    >,
    pub create_stream_executor: ::std::option::Option<
        unsafe extern "C" fn(
            platform: *const SP_Platform,
            params: *mut SE_CreateStreamExecutorParams,
            status: *mut TF_Status,
        ),
    >,
    pub destroy_stream_executor: ::std::option::Option<
        unsafe extern "C" fn(platform: *const SP_Platform, stream_executor: *mut SP_StreamExecutor),
    >,
    pub create_timer_fns: ::std::option::Option<
        unsafe extern "C" fn(
            platform: *const SP_Platform,
            timer: *mut SP_TimerFns,
            status: *mut TF_Status,
        ),
    >,
    pub destroy_timer_fns: ::std::option::Option<
        unsafe extern "C" fn(platform: *const SP_Platform, timer_fns: *mut SP_TimerFns),
    >,
}
#[test]
fn bindgen_test_layout_SP_PlatformFns() {
    assert_eq!(
        ::std::mem::size_of::<SP_PlatformFns>(),
        88usize,
        concat!("Size of: ", stringify!(SP_PlatformFns))
    );
    assert_eq!(
        ::std::mem::align_of::<SP_PlatformFns>(),
        8usize,
        concat!("Alignment of ", stringify!(SP_PlatformFns))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SP_PlatformFns>())).struct_size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_PlatformFns),
            "::",
            stringify!(struct_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SP_PlatformFns>())).ext as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_PlatformFns),
            "::",
            stringify!(ext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SP_PlatformFns>())).get_device_count as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_PlatformFns),
            "::",
            stringify!(get_device_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SP_PlatformFns>())).create_device as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_PlatformFns),
            "::",
            stringify!(create_device)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SP_PlatformFns>())).destroy_device as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_PlatformFns),
            "::",
            stringify!(destroy_device)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SP_PlatformFns>())).create_device_fns as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_PlatformFns),
            "::",
            stringify!(create_device_fns)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SP_PlatformFns>())).destroy_device_fns as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_PlatformFns),
            "::",
            stringify!(destroy_device_fns)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SP_PlatformFns>())).create_stream_executor as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_PlatformFns),
            "::",
            stringify!(create_stream_executor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SP_PlatformFns>())).destroy_stream_executor as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_PlatformFns),
            "::",
            stringify!(destroy_stream_executor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SP_PlatformFns>())).create_timer_fns as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_PlatformFns),
            "::",
            stringify!(create_timer_fns)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SP_PlatformFns>())).destroy_timer_fns as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(SP_PlatformFns),
            "::",
            stringify!(destroy_timer_fns)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SE_PlatformRegistrationParams {
    pub struct_size: usize,
    pub ext: *mut ::std::os::raw::c_void,
    pub major_version: i32,
    pub minor_version: i32,
    pub patch_version: i32,
    pub platform: *mut SP_Platform,
    pub platform_fns: *mut SP_PlatformFns,
    pub destroy_platform: ::std::option::Option<unsafe extern "C" fn(platform: *mut SP_Platform)>,
    pub destroy_platform_fns:
        ::std::option::Option<unsafe extern "C" fn(platform_fns: *mut SP_PlatformFns)>,
}
#[test]
fn bindgen_test_layout_SE_PlatformRegistrationParams() {
    assert_eq!(
        ::std::mem::size_of::<SE_PlatformRegistrationParams>(),
        64usize,
        concat!("Size of: ", stringify!(SE_PlatformRegistrationParams))
    );
    assert_eq!(
        ::std::mem::align_of::<SE_PlatformRegistrationParams>(),
        8usize,
        concat!("Alignment of ", stringify!(SE_PlatformRegistrationParams))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SE_PlatformRegistrationParams>())).struct_size as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SE_PlatformRegistrationParams),
            "::",
            stringify!(struct_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SE_PlatformRegistrationParams>())).ext as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SE_PlatformRegistrationParams),
            "::",
            stringify!(ext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SE_PlatformRegistrationParams>())).major_version as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SE_PlatformRegistrationParams),
            "::",
            stringify!(major_version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SE_PlatformRegistrationParams>())).minor_version as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SE_PlatformRegistrationParams),
            "::",
            stringify!(minor_version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SE_PlatformRegistrationParams>())).patch_version as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SE_PlatformRegistrationParams),
            "::",
            stringify!(patch_version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SE_PlatformRegistrationParams>())).platform as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SE_PlatformRegistrationParams),
            "::",
            stringify!(platform)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SE_PlatformRegistrationParams>())).platform_fns as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SE_PlatformRegistrationParams),
            "::",
            stringify!(platform_fns)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SE_PlatformRegistrationParams>())).destroy_platform as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SE_PlatformRegistrationParams),
            "::",
            stringify!(destroy_platform)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SE_PlatformRegistrationParams>())).destroy_platform_fns
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(SE_PlatformRegistrationParams),
            "::",
            stringify!(destroy_platform_fns)
        )
    );
}
extern "C" {
    pub fn SE_InitPlugin(params: *mut SE_PlatformRegistrationParams, status: *mut TF_Status);
}
